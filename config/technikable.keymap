#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

#define BAS_L 0
#define NAS_L 1
#define NAV_L 2
#define MOUSE_L 3
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10




 
 // this is the root part, everything comes from this.
 / {
     chosen {
        zmk,matrix_transform = &ortho_transform;
     };
 

     macros {
        // (TH, CH, SH, WH, GH, PH) are realized with combos (TN, CT, SN, WM, GM, FD
            TH_Macro: TH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp T &kp H>
                    ;
                };
            CH_Macro: CH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp C &kp H>
                    ;
            };
            SH_Macro: SH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp S &kp H>
                    ;
            };
            WH_Macro: WH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp W &kp H>
                    ;
            };
            GH_Macro: GH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp G &kp H>
                    ;
            };
            PH_Macro: PH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp P &kp H>
                    ;
            };
            Qu_Macro: Qu_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp Q &kp U>
                    ;

            // I DON'T EVEN NEED MACROS FOR THESE LOL, just make them normal KPs
            };
            Copy_Macro: Copy_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp LG(C)>
                    ;
            };
             Paste_Macro: Paste_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                = <&kp LG(V)>
                ;
            };
            Undo_Macro: Undo_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                = <&kp LG(Z)>
                ;
            };
            Cut_Macro: Cut_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp LG(X)>
                    ;
            };
        };

     combos {
        compatible = "zmk,combos";

        combo_Z {
            timeout-ms = <50>;
            key-positions = <0 1>; // G+J
            bindings = <&kp Z>; 
            layers = <0>; //limited to only base layer
            };
        combo_Qu {
            timeout-ms = <50>;
            key-positions = <3 1>; //G+X
            bindings = <&Qu_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };

        // H DIGRAPHS
        combo_TH {
            timeout-ms = <50>;
            key-positions = <14 15>; //N+T
            bindings = <&TH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };   
        combo_CH {
            timeout-ms = <50>;
            key-positions = <12 15>; //C+T
            bindings = <&CH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_SH {
            timeout-ms = <50>;
            key-positions = <13 14>; //S+N
            bindings = <&SH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_WH {
            timeout-ms = <50>;
            key-positions = <1 2>; //W+M
            bindings = <&WH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_GH {
            timeout-ms = <50>;
            key-positions = <2 3>; //G+M
            bindings = <&GH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_PH {
            timeout-ms = <50>;
            key-positions = <25 27>; //F+D
            bindings = <&PH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        };
            // working!!
        behaviors {
            rh_HRMs: rh_HRMs {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced"; // like qmk PERMISSIVE_HOLD
                tapping-term-ms = <280>; // triggers HOLD when time expires, or another key is pressed and released
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>; // this removes the delay when typing quickly
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>; //THIS IS FOR THE TWO KPS
                hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 43>; // all left hand and thumbs. LIKE ACHORDIAN. EVERYTHING EXCEPT WHAT I WANT
                hold-trigger-on-release;       // delay positional check until key-release
            };
            lh_HRMs: lh_HRMs {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41 42 43>; // all right hand and thumb
                hold-trigger-on-release;             // delay positional check until key-release
            };
            //going to try to make thumb layer!
            left_thumb_HRM:left_thumb_HRM {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                #binding-cells = <2>;
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 40 41 42 43>; // All hands, right thumb
                hold-trigger-on-release;     
            };
            right_thumb_HRM: right_thumb_HRM {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                #binding-cells = <2>;
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39>; // All hands,  left thumb
                hold-trigger-on-release;  
            };
            comma_semi: comma_semi {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp COMMA>, <&kp SEMICOLON>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            star_hash: star_hash {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp ASTERISK>, <&kp HASH>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            period_colon: period_colon {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp PERIOD>, <&kp COLON>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            f_slash_b_slash: f-slash_b-slash {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp SLASH>, <&kp BACKSLASH>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            double_quotes_question: double_quotes_question {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp DOUBLE_QUOTES>, <&kp QUESTION>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            quote_exclaim: quote_exclaim {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp SQT>, <&kp EXCLAMATION>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            tilde_carrot: tilde_carrot {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp TILDE>, <&kp CARET>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
        };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
  //pos0 1      2          3         4      5                            6                 7          8           9          10                 11     
  &kp W  &kp X  &kp M      &kp G     &kp J  &kp LEFT_BRACKET            &kp RIGHT_BRACKET  &star_hash   &period_colon  &f_slash_b_slash  &double_quotes_question  &quote_exclaim
  //12      13          14                      15                              16                17     18                             19                  20                              21                                  22                              23      
  &lh_HRMs LEFT_ALT C  &lh_HRMs LEFT_CONTROL S  &lh_HRMs LEFT_COMMAND N      &lh_HRMs LSHIFT T     &kp K  &kp HASH                    &kp HASH           &comma_semi  &rh_HRMs RSHIFT A       &rh_HRMs RIGHT_COMMAND E      &rh_HRMs RIGHT_CONTROL I              &rh_HRMs RIGHT_ALT H
  // 24  25     26         27        28     29                          30                  31         32         33         34                 35
  &kp P  &kp F  &kp L      &kp D     &kp V  &kp HASH                    &kp HASH           &kp MINUS  &kp U       &kp O      &kp Y              &kp B
                        //36       37        38     39                40        41                 42         43
                        &kp ESCAPE  &kp BACKSPACE  &left_thumb_HRM 1 R  &kp HASH        &kp HASH  &right_thumb_HRM 2 SPACE          &right_thumb_HRM 3 RET   &kp TAB
             >;                                                                                    //make sure nav layer is on thumb!
         };
 
        nas_layer {
            label = "Nas";
            bindings = <
&kp PERCENT    &kp AT_SIGN  &kp DOLLAR  &tilde_carrot       &trans  &bt BT_CLR           &bt BT_SEL 2  &star_hash   &kp N7        &kp N8        &kp NUMBER_9  &trans
&lh_HRMs LEFT_ALT LESS_THAN  &lh_HRMs LEFT_CONTROL MINUS   &lh_HRMs LEFT_COMMAND PIPE    &lh_HRMs LSHIFT GREATER_THAN  &trans  &bt BT_SEL 0         &bt BT_SEL 3  &comma_semi  &rh_HRMs RSHIFT NUMBER_1  &rh_HRMs RIGHT_COMMAND NUMBER_2  &rh_HRMs RIGHT_CONTROL N5        &rh_HRMs RIGHT_ALT N0
&kp AMPERSAND  &kp PLUS     &kp EQUAL   &kp GRAVE         &trans  &bt BT_SEL 1         &bt BT_SEL 4  &kp MINUS      &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_6  &trans
                            &trans      &trans            &trans  &none         &none  &kp PERIOD    &kp COMMA      &trans
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp INS   &kp CAPSLOCK  &kp HASH       &kp HASH       &trans  &trans          &trans  &trans  &Paste_Macro        &Copy_Macro          &Cut_Macro          &Undo_Macro
&kp LEFT  &kp UP_ARROW  &kp DOWN       &kp RIGHT      &trans  &trans          &trans  &trans  &kp LEFT_SHIFT  &kp RIGHT_COMMAND  &kp RIGHT_CONTROL  &kp RIGHT_ALT
&kp HOME  &kp PG_UP     &kp PAGE_DOWN  &kp END        &trans  &trans          &trans  &trans  &Paste_Macro        &Copy_Macro          &Cut_Macro          &Undo_Macro
                        &kp ESCAPE     &kp BACKSPACE  &kp R   &trans  &trans  &trans  &trans    &trans
            >;
        };

        mouse_layer {
            label = "Mouse";
            bindings = <
&Undo_Macro &Cut_Macro  &Copy_Macro     &Paste_Macro     &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans          &trans  &trans  &kp RSHIFT  &kp RIGHT_COMMAND  &kp RIGHT_CONTROL  &kp RIGHT_ALT
&trans  &trans  &trans     &trans     &trans     &trans          &trans  &trans  &Paste_Macro  &Copy_Macro  &Cut_Macro  &Undo_Macro
                &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
