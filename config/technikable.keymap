/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/outputs.h>
 
 #define BAS_L 0
 #define NAV_L 1
 #define NUM_L 2
 #define SYM_L 3
 
 // Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
 &lt { quick_tap_ms = <200>; };
 
 // this is the root part, everything comes from this.
 / {
     chosen {
        zmk,matrix_transform = &ortho_transform;
     };
 
     conditional_layers {
         compatible = "zmk,conditional-layers";
     tri_layer {
         if-layers = <NAV_L NUM_L>;
         then-layer = <SYM_L>;
        };
     };

     macros {
        // (TH, CH, SH, WH, GH, PH) are realized with combos (TN, CT, SN, WM, GM, FD
            TH_Macro: TH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp T &kp H>
                    ;
                };
            CH_Macro: CH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp C &kp H>
                    ;
            };
            SH_Macro: SH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp S &kp H>
                    ;
            };
            WH_Macro: WH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp W &kp H>
                    ;
            };
            GH_Macro: GH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp G &kp H>
                    ;
            };
            PH_Macro: PH_Macro { //how does this work with 'The,' in the sense... capitalization?
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp P &kp H>
                    ;
            };
            Qu_Macro: Qu_Macro {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&kp Q &kp U>
                    ;
            };
        };

     combos {
        compatible = "zmk,combos";

        combo_Z {
            timeout-ms = <50>;
            key-positions = <3 4>; // G+J
            bindings = <&kp Z>; 
            layers = <0>; //limited to only base layer
            };
        combo_Qu {
            timeout-ms = <50>;
            key-positions = <3 24>; //G+P
            bindings = <&Qu_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };

        // H DIGRAPHS
        combo_TH {
            timeout-ms = <50>;
            key-positions = <14 15>; //N+T
            bindings = <&TH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };   
        combo_CH {
            timeout-ms = <50>;
            key-positions = <12 15>; //C+T
            bindings = <&CH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_SH {
            timeout-ms = <50>;
            key-positions = <13 14>; //S+N
            bindings = <&SH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_WH {
            timeout-ms = <50>;
            key-positions = <0 2>; //W+M
            bindings = <&WH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_GH {
            timeout-ms = <50>;
            key-positions = <2 3>; //G+M
            bindings = <&GH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        combo_PH {
            timeout-ms = <50>;
            key-positions = <25 27>; //F+D
            bindings = <&PH_Macro>;  //output my macro
            layers = <0>; //limited to only base layer
            };
        };

        behaviors {
            rh_HRMs: right_positional_hold_tap {
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 43>;
                hold-trigger-on-release;             // delay positional check until key-release
            };
            lh_HRMs: left_positional_hold_tap {
                flavor = "balanced";
                tapping-term-ms = <280>;
                quick-tap-ms = <175>;                // repeat on tap-into-hold
                require-prior-idle-ms = <150>;
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 36 37 38 39 40 41 42 43>;
                hold-trigger-on-release;             // delay positional check until key-release
            };
        };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
  //pos0 1      2          3         4      5                            6                 7          8           9          10                 11     
  &kp W  &kp X  &kp M      &kp G     &kp J  &kp LEFT_BRACKET            &kp RIGHT_BRACKET  &kp HASH   &kp PERIOD  &kp SLASH  &kp DOUBLE_QUOTES  &kp SQT
  //12   13     14         15         16    17                          18                 19         20          21         22                 23      
  &lh_HRMs LEFT_ALT C  &lh_HRMs LEFT_CONTROL S  &lh_HRMs LEFT_COMMAND N      &lh_HRMs LSHIFT T     &kp K  &kp HASH                    &kp HASH           &kp COMMA  &rh_HRMs RSHIFT A       &rh_HRMs RIGHT_COMMAND E      &rh_HRMs RIGHT_CONTROL I              &rh_HRMs RIGHT_ALT H
  // 24  25     26         27        28     29                          30                  31         32         33         34                 35
  &kp P  &kp F  &kp L      &kp D     &kp V  &kp HASH                    &kp HASH           &kp MINUS  &kp U       &kp O      &kp Y              &kp B
                        //36       37        38     39                40        41                 42         43
                        &kp ESCAPE  &kp BACKSPACE  &kp R  &mo 1        &mo 2  &kp SPACE          &kp RET   &kp TAB
             >;
         };
 
         nav_layer {
             label = "Nav";
             bindings = <
 &bt BT_CLR &trans     &trans     &trans      &trans          &trans       &trans     &trans         &trans      &trans     &trans     &kp DEL
 &trans     &trans     &trans     &trans      &trans          &trans       &trans     &kp LARW       &kp DARW    &kp UARW   &kp RARW   &trans
 &trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3       &bt BT_SEL 4    &trans     &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                       &trans     &trans      &trans          &trans       &trans    &trans  &trans         &trans
             >;
         };
 
         num_layer {
             label = "Num";
             bindings = <
 &trans     &kp LBKT   &kp N7     &kp N8      &kp N9    &kp RBKT    &kp C_PREV    &trans         &trans       &trans       &trans     &trans
 &trans     &kp MINUS  &kp N4     &kp N5      &kp N6    &kp EQUAL   &kp C_NEXT    &trans         &trans       &trans       &trans     &trans
 &trans     &kp GRAVE  &kp N1     &kp N2      &kp N3    &kp BSLH    &trans        &trans         &trans       &trans       &trans     &trans
                      &trans     &kp N0      &trans    &none         &none     &kp ESC        &kp DEL      &trans
             >;
         };
 
         sym_layer {
             label = "Sym";
             bindings = <
 &trans     &kp LBRC   &kp LS(N7) &kp LS(N8)  &kp LS(N9)   &kp RBRC     &trans     &trans    &trans       &trans       &trans     &trans
 &trans     &kp COLON  &kp LS(N4) &kp LS(N5)  &kp LS(N6)   &kp PLUS     &trans     &trans    &trans       &trans       &trans     &trans
 &trans     &kp TILDE  &kp LS(N1) &kp LS(N2)  &kp LS(N3)   &kp LS(BSLH) &trans     &trans    &trans       &trans       &trans     &trans
                       &trans     &kp LS(N0)      &trans          &trans       &trans    &trans  &trans         &trans
             >;
         };
     };
 };
